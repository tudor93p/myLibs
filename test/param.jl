using myLibs: Parameters 
using OrderedCollections: OrderedDict 
using Combinatorics: powerset


module M 
#export usedkeys
usedkeys(args...) = [:X]
a=3 

digits = (X=(3,3),) 

path = "abc" 
end 

function usedkeys()
	[:X,:Z]

end 

usedkeys(P::AbstractDict) = usedkeys()

NrParamSets = 1




input_dict = Dict(

		:allparams => Dict(:X=>[1],:Y=>[3,4],:T=>[10,20,30]),

#		:digits => OrderedDict(:X=>(1,0), :Y=>(1,1), :Z=>(2,2)),
		:digits => (X=(1,0), Y=(1,1), Z=(2,2)),

		)



Parameters.Operations.typical_allparams(usedkeys, input_dict[:allparams]) |> println

const ROOT = "Data"

#jFN = Parameters.FileName("Data", usedkeys, identity, identity) 


#@show Parameters.fname(ROOT)("some_file")

#@show FN

P = Dict(:X=>44,:Z=>0.5,:Y=>-3,:T=>-2.5)

pd = Parameters.typical_params_digits(usedkeys, input_dict[:digits])

@show pd(P)

println()

@show Parameters.params_to_string(pd(P))

@show Parameters.prefix(ROOT)
@show Parameters.prefix(M)
@show Parameters.prefix(ROOT,M)
@show Parameters.prefix(M,ROOT)



#
#@show Parameters.fname(ROOT, pd)("some_file")
#@show Parameters.fname(ROOT, pd, P)("some_file")
#@show Parameters.fname(ROOT, pd, P, P)("some_file")
#
#
#@show Parameters.fname(M, pd)("some_file") 
#@show Parameters.fname(M, pd, P)("some_file") 
#@show Parameters.fname(ROOT, M, pd, P)("some_file") 
#@show Parameters.fname(ROOT, M, pd, P)("some_file") 
@show Parameters.prefix("", M,ROOT)#, pd, P)("some_file") 
#
#
##ROOT, M, pd
#
#
#get_fname(args...) = Parameters.fname(ROOT, M, pd, args...) 
#
#@show get_fname(P,P,P)("nnewfile")
#


pd = Parameters.typical_params_digits(usedkeys, input_dict[:digits])

for pd_ in [pd, (usedkeys, input_dict[:digits]), input_dict[:digits]] 

	for path in [ROOT, (ROOT,M)]

	local args = Any[usedkeys, pd_, path]
	
	for inds in powerset(1:length(args)) 
	
		args_ = copy(args) 
	
		for i in inds 
	
			args_[i] = M
	
		end 
			
	
		local FN = Parameters.FilenameGenerator(args_...)
	
		@show FN.get_fname(P)("f")

		local PF = Parameters.ParamFlow(identity, args_...)

		PF.get_fname(P)("f")==FN.get_fname(P)("f") || error()


		local PF = Parameters.ParamFlow(input_dict, args_...)

		@show PF.allparams() 

		println()



	end 

end 
end 








FN = Parameters.FilenameGenerator((usedkeys, input_dict[:digits]),ROOT)



@show FN.get_fname(P)("f") 

println() 










input_dict = Dict(:allparams=>(
										length = [10,20],
									 	width = [7],
										Barrier_height = [0,0.5],
										SCpx_magnitude = [0.6],
										),

									 :digits=>(
											length = (3, 0),

											Barrier_height = (1,3),
										)	
									
									)

usedkeys2 = [:length, :width, :SCpx_magnitude]

FN = Parameters.FilenameGenerator(usedkeys2, input_dict[:digits], "Data")


@show FN.usedkeys 


PF = Parameters.ParamFlow((1,input_dict[:allparams]), usedkeys2, input_dict[:digits], "Data")


@show PF.allparams()


 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 















 













 















 















 















 















 




















println()
